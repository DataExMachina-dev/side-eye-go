// This protobuf is used to describe the definition of a snapshot
// program to be executed.

syntax = "proto3";

package snapshot_program;

message RuntimeConfig {
  uint32 g_sched_offset = 1;
  // Offset of pc in g.gobuf from the g.
  uint32 g_go_buf_pc_offset = 2;
  // Offset of bp in g.gobuf from the g.
  uint32 g_go_buf_bp_offset = 3;
  // Offset of syscallpc in the g.
  uint32 g_syscall_pc_offset = 4;
  // Offset of syscallsp in the g.
  uint32 g_syscall_sp_offset = 5;
  // Offset of goid in the g.
  uint32 g_goid_offset = 6;
  // Offset of atomicstatus in the g.
  uint32 g_atomicstatus_offset = 7;
  // Offset of stacktopsp in the g.
  uint32 g_stktopsp_offset = 16;

  // Offset of preemptOff in the m.
  uint32 m_preempt_off_offset = 8;

  // Address of runtime.firstmoduledata.
  uint64 variable_runtime_dot_firstmoduledata = 9;
  // Address of runtime.allgs.
  uint64 variable_runtime_dot_allgs = 19;

  // Offset in runtime.moduledata of the types field.
  uint32 moduledata_types_offset = 10;
  // Offset in runtime.moduledata of the etypes field.
  uint32 moduledata_etypes_offset = 11;
  // Offset in runtime.moduledata of the text field.
  uint32 moduledata_text_offset = 14;
  // Offset in runtime.moduledata of the bss field.
  uint32 moduledata_bss_offset = 20;

  // Virtual address of the go runtime.bss symbol. Used to compute the actual
  // address of variables that are in the go bss section by resolving the
  // actual address of the bss section by peeking into the runtime.moduledata.
  // Note that the go runtime.bss symbol is used to mark the start of the bss
  // section of the go data in the program, and not of the bss section of the
  // object file.
  uint64 go_runtime_bss_address = 21;

  // The start pc of the stoptheworld.Dereference function.
  uint64 dereference_start_pc = 12;
  // The end pc of the stoptheworld.Dereference function.
  uint64 dereference_end_pc = 13;

  // The start pc of the runtime.startTheWorld function.
  uint64 start_the_world_start_addr = 17;
  // The start pc of the runtime.stopTheWorld function.
  uint64 stop_the_world_start_addr = 18;

  reserved 15;
}

message PcClassifier {
  repeated uint64 target_pc = 1;
  repeated uint32 prog_pc = 2;
}

// Describes a type that implements go context.Context.
message GoContextImpl {
  optional uint32 context_offset = 1;
  optional uint32 key_offset = 2;
  optional uint32 value_offset = 3;
}

// Describes a value type that we want to capture from go context.Context.
message GoContextValueType {
  uint32 index = 1;
  uint32 offset = 2;
  uint32 type = 3;
}

message TypeInfo {
  uint32 enqueue_pc = 1;
  uint32 byte_len = 2;

  GoContextImpl go_context_impl = 3;
  // Go context value spec identified by this type being the key.
  GoContextValueType go_context_key = 4;
  optional uint32 go_context_key_value_type = 5;
  // Go context value spec identified by this type being the value.
  GoContextValueType go_context_value = 6;
}

message SnapshotProgram {
  RuntimeConfig runtime_config = 1;
  PcClassifier pc_classifier = 2;
  map<uint64, uint32> go_runtime_type_to_type_id = 3;
  map<uint32, TypeInfo> type_info = 4;
  bytes prog = 5;
}
