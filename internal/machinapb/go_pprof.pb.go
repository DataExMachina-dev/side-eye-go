// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: go_pprof.proto

package machinapb

import (
	chunkpb "github.com/DataExMachina-dev/side-eye-go/internal/chunkpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The pprof contents to capture.
type CaptureContents int32

const (
	CaptureContents_INVALID CaptureContents = 0
	// Capture only the execution trace.
	CaptureContents_EXECUTION_TRACE CaptureContents = 1
	// Capture both the CPU profile and the execution trace.
	CaptureContents_EXECUTION_TRACE_AND_CPU_PROFILE CaptureContents = 2
)

// Enum value maps for CaptureContents.
var (
	CaptureContents_name = map[int32]string{
		0: "INVALID",
		1: "EXECUTION_TRACE",
		2: "EXECUTION_TRACE_AND_CPU_PROFILE",
	}
	CaptureContents_value = map[string]int32{
		"INVALID":                         0,
		"EXECUTION_TRACE":                 1,
		"EXECUTION_TRACE_AND_CPU_PROFILE": 2,
	}
)

func (x CaptureContents) Enum() *CaptureContents {
	p := new(CaptureContents)
	*p = x
	return p
}

func (x CaptureContents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureContents) Descriptor() protoreflect.EnumDescriptor {
	return file_go_pprof_proto_enumTypes[0].Descriptor()
}

func (CaptureContents) Type() protoreflect.EnumType {
	return &file_go_pprof_proto_enumTypes[0]
}

func (x CaptureContents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureContents.Descriptor instead.
func (CaptureContents) EnumDescriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{0}
}

// CaptureRequest is sent to the server to capture duration data from a
// go process. Internally it will also start a CPU profile that will extend for
// longer than the runtime trace duration. That CPU profile will be included in
// the response if the capture contents request so.
type CaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessFingerprint string `protobuf:"bytes,1,opt,name=process_fingerprint,json=processFingerprint,proto3" json:"process_fingerprint,omitempty"`
	// The number of seconds to capture the execution trace and CPU profile for.
	Seconds uint32 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// The base URL of the pprof server. Note that this should not include
	// the /debug/pprof prefix.
	PprofAddress string `protobuf:"bytes,3,opt,name=pprof_address,json=pprofAddress,proto3" json:"pprof_address,omitempty"`
	// The contents to capture.
	Contents CaptureContents `protobuf:"varint,4,opt,name=contents,proto3,enum=go_pprof.CaptureContents" json:"contents,omitempty"`
}

func (x *CaptureRequest) Reset() {
	*x = CaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureRequest) ProtoMessage() {}

func (x *CaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureRequest.ProtoReflect.Descriptor instead.
func (*CaptureRequest) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{0}
}

func (x *CaptureRequest) GetProcessFingerprint() string {
	if x != nil {
		return x.ProcessFingerprint
	}
	return ""
}

func (x *CaptureRequest) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *CaptureRequest) GetPprofAddress() string {
	if x != nil {
		return x.PprofAddress
	}
	return ""
}

func (x *CaptureRequest) GetContents() CaptureContents {
	if x != nil {
		return x.Contents
	}
	return CaptureContents_INVALID
}

type CaptureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*CaptureResponse_ExecutionTraceStart_
	//	*CaptureResponse_ExecutionTraceChunk
	//	*CaptureResponse_ExecutionTraceComplete_
	//	*CaptureResponse_CpuProfileStart_
	//	*CaptureResponse_CpuProfileChunk
	//	*CaptureResponse_CpuProfileComplete_
	Message isCaptureResponse_Message `protobuf_oneof:"message"`
}

func (x *CaptureResponse) Reset() {
	*x = CaptureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse) ProtoMessage() {}

func (x *CaptureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse.ProtoReflect.Descriptor instead.
func (*CaptureResponse) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{1}
}

func (m *CaptureResponse) GetMessage() isCaptureResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CaptureResponse) GetExecutionTraceStart() *CaptureResponse_ExecutionTraceStart {
	if x, ok := x.GetMessage().(*CaptureResponse_ExecutionTraceStart_); ok {
		return x.ExecutionTraceStart
	}
	return nil
}

func (x *CaptureResponse) GetExecutionTraceChunk() *chunkpb.Chunk {
	if x, ok := x.GetMessage().(*CaptureResponse_ExecutionTraceChunk); ok {
		return x.ExecutionTraceChunk
	}
	return nil
}

func (x *CaptureResponse) GetExecutionTraceComplete() *CaptureResponse_ExecutionTraceComplete {
	if x, ok := x.GetMessage().(*CaptureResponse_ExecutionTraceComplete_); ok {
		return x.ExecutionTraceComplete
	}
	return nil
}

func (x *CaptureResponse) GetCpuProfileStart() *CaptureResponse_CpuProfileStart {
	if x, ok := x.GetMessage().(*CaptureResponse_CpuProfileStart_); ok {
		return x.CpuProfileStart
	}
	return nil
}

func (x *CaptureResponse) GetCpuProfileChunk() *chunkpb.Chunk {
	if x, ok := x.GetMessage().(*CaptureResponse_CpuProfileChunk); ok {
		return x.CpuProfileChunk
	}
	return nil
}

func (x *CaptureResponse) GetCpuProfileComplete() *CaptureResponse_CpuProfileComplete {
	if x, ok := x.GetMessage().(*CaptureResponse_CpuProfileComplete_); ok {
		return x.CpuProfileComplete
	}
	return nil
}

type isCaptureResponse_Message interface {
	isCaptureResponse_Message()
}

type CaptureResponse_ExecutionTraceStart_ struct {
	ExecutionTraceStart *CaptureResponse_ExecutionTraceStart `protobuf:"bytes,1,opt,name=execution_trace_start,json=executionTraceStart,proto3,oneof"`
}

type CaptureResponse_ExecutionTraceChunk struct {
	ExecutionTraceChunk *chunkpb.Chunk `protobuf:"bytes,2,opt,name=execution_trace_chunk,json=executionTraceChunk,proto3,oneof"`
}

type CaptureResponse_ExecutionTraceComplete_ struct {
	ExecutionTraceComplete *CaptureResponse_ExecutionTraceComplete `protobuf:"bytes,3,opt,name=execution_trace_complete,json=executionTraceComplete,proto3,oneof"`
}

type CaptureResponse_CpuProfileStart_ struct {
	CpuProfileStart *CaptureResponse_CpuProfileStart `protobuf:"bytes,4,opt,name=cpu_profile_start,json=cpuProfileStart,proto3,oneof"`
}

type CaptureResponse_CpuProfileChunk struct {
	CpuProfileChunk *chunkpb.Chunk `protobuf:"bytes,5,opt,name=cpu_profile_chunk,json=cpuProfileChunk,proto3,oneof"`
}

type CaptureResponse_CpuProfileComplete_ struct {
	CpuProfileComplete *CaptureResponse_CpuProfileComplete `protobuf:"bytes,6,opt,name=cpu_profile_complete,json=cpuProfileComplete,proto3,oneof"`
}

func (*CaptureResponse_ExecutionTraceStart_) isCaptureResponse_Message() {}

func (*CaptureResponse_ExecutionTraceChunk) isCaptureResponse_Message() {}

func (*CaptureResponse_ExecutionTraceComplete_) isCaptureResponse_Message() {}

func (*CaptureResponse_CpuProfileStart_) isCaptureResponse_Message() {}

func (*CaptureResponse_CpuProfileChunk) isCaptureResponse_Message() {}

func (*CaptureResponse_CpuProfileComplete_) isCaptureResponse_Message() {}

type CaptureResponse_ExecutionTraceStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approximate boot time of the process. This can
	// be used to translate the timestamps communicated in
	// clock_monotonic to human time.
	ApproximateBootTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=approximate_boot_time,json=approximateBootTime,proto3" json:"approximate_boot_time,omitempty"`
	// The timestamp around when the trace started, expressed in monotonic time.
	// This can be added to approximate_boot_time to get the wall clock time.
	// Besides indicating when the trace started, this also doubles as a reading
	// of the monotonic clock around when the approximate_boot_time clock
	// reading was taken.
	TraceStartMonotonic uint64 `protobuf:"varint,3,opt,name=trace_start_monotonic,json=traceStartMonotonic,proto3" json:"trace_start_monotonic,omitempty"`
	// The duration of the execution trace in seconds.
	DurationSeconds uint32 `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
}

func (x *CaptureResponse_ExecutionTraceStart) Reset() {
	*x = CaptureResponse_ExecutionTraceStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse_ExecutionTraceStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse_ExecutionTraceStart) ProtoMessage() {}

func (x *CaptureResponse_ExecutionTraceStart) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse_ExecutionTraceStart.ProtoReflect.Descriptor instead.
func (*CaptureResponse_ExecutionTraceStart) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CaptureResponse_ExecutionTraceStart) GetApproximateBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ApproximateBootTime
	}
	return nil
}

func (x *CaptureResponse_ExecutionTraceStart) GetTraceStartMonotonic() uint64 {
	if x != nil {
		return x.TraceStartMonotonic
	}
	return 0
}

func (x *CaptureResponse_ExecutionTraceStart) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

// Indicates that an execution trace has completed for the process.
type CaptureResponse_ExecutionTraceComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureResponse_ExecutionTraceComplete) Reset() {
	*x = CaptureResponse_ExecutionTraceComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse_ExecutionTraceComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse_ExecutionTraceComplete) ProtoMessage() {}

func (x *CaptureResponse_ExecutionTraceComplete) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse_ExecutionTraceComplete.ProtoReflect.Descriptor instead.
func (*CaptureResponse_ExecutionTraceComplete) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{1, 1}
}

// Indicates that a cpu profile has started for the process. Note that this
// can be arbitrarily interleaved with other messages.
type CaptureResponse_CpuProfileStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of the cpu profile in seconds.
	DurationSeconds uint32 `protobuf:"varint,1,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
}

func (x *CaptureResponse_CpuProfileStart) Reset() {
	*x = CaptureResponse_CpuProfileStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse_CpuProfileStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse_CpuProfileStart) ProtoMessage() {}

func (x *CaptureResponse_CpuProfileStart) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse_CpuProfileStart.ProtoReflect.Descriptor instead.
func (*CaptureResponse_CpuProfileStart) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CaptureResponse_CpuProfileStart) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

// Indicates that a cpu profile has completed for the process.
type CaptureResponse_CpuProfileComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureResponse_CpuProfileComplete) Reset() {
	*x = CaptureResponse_CpuProfileComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_pprof_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureResponse_CpuProfileComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureResponse_CpuProfileComplete) ProtoMessage() {}

func (x *CaptureResponse_CpuProfileComplete) ProtoReflect() protoreflect.Message {
	mi := &file_go_pprof_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureResponse_CpuProfileComplete.ProtoReflect.Descriptor instead.
func (*CaptureResponse_CpuProfileComplete) Descriptor() ([]byte, []int) {
	return file_go_pprof_proto_rawDescGZIP(), []int{1, 3}
}

var File_go_pprof_proto protoreflect.FileDescriptor

var file_go_pprof_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x1a, 0x0b, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x70, 0x72, 0x6f, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xdf, 0x06, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x15, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x6c, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x11, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70,
	0x72, 0x6f, 0x66, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x15,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f,
	0x74, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x18, 0x0a, 0x16, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x3c, 0x0a, 0x0f, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x1a, 0x14, 0x0a, 0x12, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0x58, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x43, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x32, 0x4d,
	0x0a, 0x07, 0x47, 0x6f, 0x50, 0x70, 0x72, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x67, 0x6f, 0x5f, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_pprof_proto_rawDescOnce sync.Once
	file_go_pprof_proto_rawDescData = file_go_pprof_proto_rawDesc
)

func file_go_pprof_proto_rawDescGZIP() []byte {
	file_go_pprof_proto_rawDescOnce.Do(func() {
		file_go_pprof_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_pprof_proto_rawDescData)
	})
	return file_go_pprof_proto_rawDescData
}

var file_go_pprof_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_pprof_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_pprof_proto_goTypes = []interface{}{
	(CaptureContents)(0),                           // 0: go_pprof.CaptureContents
	(*CaptureRequest)(nil),                         // 1: go_pprof.CaptureRequest
	(*CaptureResponse)(nil),                        // 2: go_pprof.CaptureResponse
	(*CaptureResponse_ExecutionTraceStart)(nil),    // 3: go_pprof.CaptureResponse.ExecutionTraceStart
	(*CaptureResponse_ExecutionTraceComplete)(nil), // 4: go_pprof.CaptureResponse.ExecutionTraceComplete
	(*CaptureResponse_CpuProfileStart)(nil),        // 5: go_pprof.CaptureResponse.CpuProfileStart
	(*CaptureResponse_CpuProfileComplete)(nil),     // 6: go_pprof.CaptureResponse.CpuProfileComplete
	(*chunkpb.Chunk)(nil),                          // 7: chunk.Chunk
	(*timestamppb.Timestamp)(nil),                  // 8: google.protobuf.Timestamp
}
var file_go_pprof_proto_depIdxs = []int32{
	0, // 0: go_pprof.CaptureRequest.contents:type_name -> go_pprof.CaptureContents
	3, // 1: go_pprof.CaptureResponse.execution_trace_start:type_name -> go_pprof.CaptureResponse.ExecutionTraceStart
	7, // 2: go_pprof.CaptureResponse.execution_trace_chunk:type_name -> chunk.Chunk
	4, // 3: go_pprof.CaptureResponse.execution_trace_complete:type_name -> go_pprof.CaptureResponse.ExecutionTraceComplete
	5, // 4: go_pprof.CaptureResponse.cpu_profile_start:type_name -> go_pprof.CaptureResponse.CpuProfileStart
	7, // 5: go_pprof.CaptureResponse.cpu_profile_chunk:type_name -> chunk.Chunk
	6, // 6: go_pprof.CaptureResponse.cpu_profile_complete:type_name -> go_pprof.CaptureResponse.CpuProfileComplete
	8, // 7: go_pprof.CaptureResponse.ExecutionTraceStart.approximate_boot_time:type_name -> google.protobuf.Timestamp
	1, // 8: go_pprof.GoPprof.Capture:input_type -> go_pprof.CaptureRequest
	2, // 9: go_pprof.GoPprof.Capture:output_type -> go_pprof.CaptureResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_go_pprof_proto_init() }
func file_go_pprof_proto_init() {
	if File_go_pprof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_pprof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pprof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pprof_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse_ExecutionTraceStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pprof_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse_ExecutionTraceComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pprof_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse_CpuProfileStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_pprof_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureResponse_CpuProfileComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_pprof_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CaptureResponse_ExecutionTraceStart_)(nil),
		(*CaptureResponse_ExecutionTraceChunk)(nil),
		(*CaptureResponse_ExecutionTraceComplete_)(nil),
		(*CaptureResponse_CpuProfileStart_)(nil),
		(*CaptureResponse_CpuProfileChunk)(nil),
		(*CaptureResponse_CpuProfileComplete_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_pprof_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_pprof_proto_goTypes,
		DependencyIndexes: file_go_pprof_proto_depIdxs,
		EnumInfos:         file_go_pprof_proto_enumTypes,
		MessageInfos:      file_go_pprof_proto_msgTypes,
	}.Build()
	File_go_pprof_proto = out.File
	file_go_pprof_proto_rawDesc = nil
	file_go_pprof_proto_goTypes = nil
	file_go_pprof_proto_depIdxs = nil
}
