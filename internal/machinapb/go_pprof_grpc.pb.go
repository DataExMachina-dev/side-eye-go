// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package machinapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoPprofClient is the client API for GoPprof service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoPprofClient interface {
	Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (GoPprof_CaptureClient, error)
}

type goPprofClient struct {
	cc grpc.ClientConnInterface
}

func NewGoPprofClient(cc grpc.ClientConnInterface) GoPprofClient {
	return &goPprofClient{cc}
}

func (c *goPprofClient) Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (GoPprof_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &GoPprof_ServiceDesc.Streams[0], "/go_pprof.GoPprof/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &goPprofCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GoPprof_CaptureClient interface {
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type goPprofCaptureClient struct {
	grpc.ClientStream
}

func (x *goPprofCaptureClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoPprofServer is the server API for GoPprof service.
// All implementations must embed UnimplementedGoPprofServer
// for forward compatibility
type GoPprofServer interface {
	Capture(*CaptureRequest, GoPprof_CaptureServer) error
	mustEmbedUnimplementedGoPprofServer()
}

// UnimplementedGoPprofServer must be embedded to have forward compatible implementations.
type UnimplementedGoPprofServer struct {
}

func (UnimplementedGoPprofServer) Capture(*CaptureRequest, GoPprof_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedGoPprofServer) mustEmbedUnimplementedGoPprofServer() {}

// UnsafeGoPprofServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoPprofServer will
// result in compilation errors.
type UnsafeGoPprofServer interface {
	mustEmbedUnimplementedGoPprofServer()
}

func RegisterGoPprofServer(s grpc.ServiceRegistrar, srv GoPprofServer) {
	s.RegisterService(&GoPprof_ServiceDesc, srv)
}

func _GoPprof_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoPprofServer).Capture(m, &goPprofCaptureServer{stream})
}

type GoPprof_CaptureServer interface {
	Send(*CaptureResponse) error
	grpc.ServerStream
}

type goPprofCaptureServer struct {
	grpc.ServerStream
}

func (x *goPprofCaptureServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GoPprof_ServiceDesc is the grpc.ServiceDesc for GoPprof service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoPprof_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_pprof.GoPprof",
	HandlerType: (*GoPprofServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _GoPprof_Capture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "go_pprof.proto",
}
