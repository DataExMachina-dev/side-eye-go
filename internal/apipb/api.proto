syntax = "proto3";

package api;

message CaptureSnapshotRequest {
  // environment is the name of the environment to capture a snapshot of; the
  // snapshot will include all monitored processes reported by agents configured
  // with this environment. If empty, it refers to agents not configured with
  // any environment.
  string environment = 1;

  // If environment is not set, agent_fingerprint and process_fingerprint must
  // be set; they identify a single process to capture a snapshot by identifying
  // one particular agent and one process monitored by that agent. This is used
  // by the side-eye-go library to capture a snapshot of its own process.
  string agent_fingerprint = 2;
  string process_fingerprint = 3;
}

message CaptureSnapshotResponse {
  int64 snapshot_id = 1;
  string snapshot_url = 2;
  repeated ProcessError errors = 3;
}

message ProcessError {
  string hostname = 1;
  string program = 2;
  int64 pid = 3;
  string message = 4;
  ErrorKind error_kind = 5;
}

// SnapshotError is returned as an error detail by CaptureSnapshot when all the
// processes fail.
message SnapshotError {
  // The error message as a human-readable string. This is the same as the
  // message of the outer gRPC error.
  string message = 1;
  ErrorKind error_kind = 2;
}

enum ErrorKind {
  UNKNOWN = 0;
  BINARY_STRIPPED = 1;
  NO_AGENTS = 2;
  NO_PROCESSES = 3;
  PROCESS_MISSING = 4;
  ENVIRONMENT_MISSING = 5;
}

// The service exposes an interface for capturing snapshots programmatically.
service ApiService {
  // CaptureSnapshot captures a snapshot of the specified environment or the
  // specified process. If no snapshots are snapshotted successfully, it returns
  // an error containing SnapshotError as a detail. If at least one process
  // snapshot is successful, the RPC is successful.
  rpc CaptureSnapshot(CaptureSnapshotRequest) returns (CaptureSnapshotResponse);
}
